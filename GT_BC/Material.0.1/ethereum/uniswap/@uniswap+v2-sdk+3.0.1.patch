diff --git a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
index 7c92f18..44d5ad6 100644
--- a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
+++ b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
@@ -1,6 +1,6 @@
 import JSBI from 'jsbi';
 export declare const FACTORY_ADDRESS = "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f";
-export declare const INIT_CODE_HASH = "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f";
+export declare const INIT_CODE_HASH = "0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db";
 export declare const MINIMUM_LIQUIDITY: JSBI;
 export declare const ZERO: JSBI;
 export declare const ONE: JSBI;
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
index f1a6331..7ffcd91 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
@@ -11,7 +11,7 @@ var solidity = require('@ethersproject/solidity');
 var address = require('@ethersproject/address');
 
 var FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';
+var INIT_CODE_HASH = '0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db';
 var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption
 
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
index 32f875e..0072e36 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
index 505e6e9..4caa115 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var e=t(require("jsbi")),n=require("@uniswap/sdk-core"),r=t(require("tiny-invariant")),o=require("@ethersproject/solidity"),u=require("@ethersproject/address"),i="0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",s=e.BigInt(1e3),a=e.BigInt(0),c=e.BigInt(1),p=e.BigInt(5),l=e.BigInt(997),f=e.BigInt(1e3);function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e,n){return e&&m(t.prototype,e),n&&m(t,n),t}function d(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t,e){return(v=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function T(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function A(t,e,n){return(A=T()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&v(o,n.prototype),o}).apply(null,arguments)}function q(t){var e="function"==typeof Map?new Map:void 0;return(q=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return A(t,arguments,y(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),v(n,t)})(t)}function k(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function w(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return g(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}var I="setPrototypeOf"in Object,x=function(t){function e(){var n;return(n=t.call(this)||this).isInsufficientReservesError=!0,n.name=n.constructor.name,I&&Object.setPrototypeOf(k(n),(this instanceof e?this.constructor:void 0).prototype),n}return d(e,t),e}(q(Error)),b=function(t){function e(){var n;return(n=t.call(this)||this).isInsufficientInputAmountError=!0,n.name=n.constructor.name,I&&Object.setPrototypeOf(k(n),(this instanceof e?this.constructor:void 0).prototype),n}return d(e,t),e}(q(Error)),O=function(t){var e=t.factoryAddress,n=t.tokenA,r=t.tokenB,s=n.sortsBefore(r)?[n,r]:[r,n];return u.getCreate2Address(e,o.keccak256(["bytes"],[o.pack(["address","address"],[s[0].address,s[1].address])]),i)},E=function(){function t(e,r){var o=e.currency.sortsBefore(r.currency)?[e,r]:[r,e];this.liquidityToken=new n.Token(o[0].currency.chainId,t.getAddress(o[0].currency,o[1].currency),18,"UNI-V2","Uniswap V2"),this.tokenAmounts=o}t.getAddress=function(t,e){return O({factoryAddress:"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",tokenA:t,tokenB:e})};var o=t.prototype;return o.involvesToken=function(t){return t.equals(this.token0)||t.equals(this.token1)},o.priceOf=function(t){return this.involvesToken(t)||r(!1),t.equals(this.token0)?this.token0Price:this.token1Price},o.reserveOf=function(t){return this.involvesToken(t)||r(!1),t.equals(this.token0)?this.reserve0:this.reserve1},o.getOutputAmount=function(o){if(this.involvesToken(o.currency)||r(!1),e.equal(this.reserve0.quotient,a)||e.equal(this.reserve1.quotient,a))throw new x;var u=this.reserveOf(o.currency),i=this.reserveOf(o.currency.equals(this.token0)?this.token1:this.token0),s=e.multiply(o.quotient,l),c=e.multiply(s,i.quotient),p=e.add(e.multiply(u.quotient,f),s),m=n.CurrencyAmount.fromRawAmount(o.currency.equals(this.token0)?this.token1:this.token0,e.divide(c,p));if(e.equal(m.quotient,a))throw new b;return[m,new t(u.add(o),i.subtract(m))]},o.getInputAmount=function(o){if(this.involvesToken(o.currency)||r(!1),e.equal(this.reserve0.quotient,a)||e.equal(this.reserve1.quotient,a)||e.greaterThanOrEqual(o.quotient,this.reserveOf(o.currency).quotient))throw new x;var u=this.reserveOf(o.currency),i=this.reserveOf(o.currency.equals(this.token0)?this.token1:this.token0),s=e.multiply(e.multiply(i.quotient,o.quotient),f),p=e.multiply(e.subtract(u.quotient,o.quotient),l),m=n.CurrencyAmount.fromRawAmount(o.currency.equals(this.token0)?this.token1:this.token0,e.add(e.divide(s,p),c));return[m,new t(i.add(m),u.subtract(o))]},o.getLiquidityMinted=function(t,o,u){t.currency.equals(this.liquidityToken)||r(!1);var i,c=o.currency.sortsBefore(u.currency)?[o,u]:[u,o];if(c[0].currency.equals(this.token0)&&c[1].currency.equals(this.token1)||r(!1),e.equal(t.quotient,a))i=e.subtract(n.sqrt(e.multiply(c[0].quotient,c[1].quotient)),s);else{var p=e.divide(e.multiply(c[0].quotient,t.quotient),this.reserve0.quotient),l=e.divide(e.multiply(c[1].quotient,t.quotient),this.reserve1.quotient);i=e.lessThanOrEqual(p,l)?p:l}if(!e.greaterThan(i,a))throw new b;return n.CurrencyAmount.fromRawAmount(this.liquidityToken,i)},o.getLiquidityValue=function(t,o,u,i,s){var c;if(void 0===i&&(i=!1),this.involvesToken(t)||r(!1),o.currency.equals(this.liquidityToken)||r(!1),u.currency.equals(this.liquidityToken)||r(!1),e.lessThanOrEqual(u.quotient,o.quotient)||r(!1),i){s||r(!1);var l=e.BigInt(s);if(e.equal(l,a))c=o;else{var f=n.sqrt(e.multiply(this.reserve0.quotient,this.reserve1.quotient)),m=n.sqrt(l);if(e.greaterThan(f,m)){var h=e.multiply(o.quotient,e.subtract(f,m)),d=e.add(e.multiply(f,p),m),y=e.divide(h,d);c=o.add(n.CurrencyAmount.fromRawAmount(this.liquidityToken,y))}else c=o}}else c=o;return n.CurrencyAmount.fromRawAmount(t,e.divide(e.multiply(u.quotient,this.reserveOf(t).quotient),c.quotient))},h(t,[{key:"token0Price",get:function(){var t=this.tokenAmounts[1].divide(this.tokenAmounts[0]);return new n.Price(this.token0,this.token1,t.denominator,t.numerator)}},{key:"token1Price",get:function(){var t=this.tokenAmounts[0].divide(this.tokenAmounts[1]);return new n.Price(this.token1,this.token0,t.denominator,t.numerator)}},{key:"chainId",get:function(){return this.token0.chainId}},{key:"token0",get:function(){return this.tokenAmounts[0].currency}},{key:"token1",get:function(){return this.tokenAmounts[1].currency}},{key:"reserve0",get:function(){return this.tokenAmounts[0]}},{key:"reserve1",get:function(){return this.tokenAmounts[1]}}]),t}(),P=function(){function t(t,e,n){this._midPrice=null,t.length>0||r(!1);var o=t[0].chainId;t.every((function(t){return t.chainId===o}))||r(!1);var u=e.wrapped;t[0].involvesToken(u)||r(!1),void 0===n||t[t.length-1].involvesToken(n.wrapped)||r(!1);for(var i,s=[u],a=w(t.entries());!(i=a()).done;){var c=i.value,p=c[1],l=s[c[0]];l.equals(p.token0)||l.equals(p.token1)||r(!1);var f=l.equals(p.token0)?p.token1:p.token0;s.push(f)}this.pairs=t,this.path=s,this.input=e,this.output=n}return h(t,[{key:"midPrice",get:function(){if(null!==this._midPrice)return this._midPrice;for(var t,e=[],r=w(this.pairs.entries());!(t=r()).done;){var o=t.value,u=o[1];e.push(this.path[o[0]].equals(u.token0)?new n.Price(u.reserve0.currency,u.reserve1.currency,u.reserve0.quotient,u.reserve1.quotient):new n.Price(u.reserve1.currency,u.reserve0.currency,u.reserve1.quotient,u.reserve0.quotient))}var i=e.slice(1).reduce((function(t,e){return t.multiply(e)}),e[0]);return this._midPrice=new n.Price(this.input,this.output,i.denominator,i.numerator)}},{key:"chainId",get:function(){return this.pairs[0].chainId}}]),t}();function C(t,e){return t.inputAmount.currency.equals(e.inputAmount.currency)||r(!1),t.outputAmount.currency.equals(e.outputAmount.currency)||r(!1),t.outputAmount.equalTo(e.outputAmount)?t.inputAmount.equalTo(e.inputAmount)?0:t.inputAmount.lessThan(e.inputAmount)?-1:1:t.outputAmount.lessThan(e.outputAmount)?1:-1}function _(t,e){var n=C(t,e);return 0!==n?n:t.priceImpact.lessThan(e.priceImpact)?-1:t.priceImpact.greaterThan(e.priceImpact)?1:t.route.path.length-e.route.path.length}var R=function(){function t(t,e,o){this.route=t,this.tradeType=o;var u=new Array(t.path.length);if(o===n.TradeType.EXACT_INPUT){e.currency.equals(t.input)||r(!1),u[0]=e.wrapped;for(var i=0;i<t.path.length-1;i++){var s=t.pairs[i].getOutputAmount(u[i]);u[i+1]=s[0]}this.inputAmount=n.CurrencyAmount.fromFractionalAmount(t.input,e.numerator,e.denominator),this.outputAmount=n.CurrencyAmount.fromFractionalAmount(t.output,u[u.length-1].numerator,u[u.length-1].denominator)}else{e.currency.equals(t.output)||r(!1),u[u.length-1]=e.wrapped;for(var a=t.path.length-1;a>0;a--){var c=t.pairs[a-1].getInputAmount(u[a]);u[a-1]=c[0]}this.inputAmount=n.CurrencyAmount.fromFractionalAmount(t.input,u[0].numerator,u[0].denominator),this.outputAmount=n.CurrencyAmount.fromFractionalAmount(t.output,e.numerator,e.denominator)}this.executionPrice=new n.Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient),this.priceImpact=n.computePriceImpact(t.midPrice,this.inputAmount,this.outputAmount)}t.exactIn=function(e,r){return new t(e,r,n.TradeType.EXACT_INPUT)},t.exactOut=function(e,r){return new t(e,r,n.TradeType.EXACT_OUTPUT)};var e=t.prototype;return e.minimumAmountOut=function(t){if(t.lessThan(a)&&r(!1),this.tradeType===n.TradeType.EXACT_OUTPUT)return this.outputAmount;var e=new n.Fraction(c).add(t).invert().multiply(this.outputAmount.quotient).quotient;return n.CurrencyAmount.fromRawAmount(this.outputAmount.currency,e)},e.maximumAmountIn=function(t){if(t.lessThan(a)&&r(!1),this.tradeType===n.TradeType.EXACT_INPUT)return this.inputAmount;var e=new n.Fraction(c).add(t).multiply(this.inputAmount.quotient).quotient;return n.CurrencyAmount.fromRawAmount(this.inputAmount.currency,e)},t.bestTradeExactIn=function(e,o,u,i,s,c,p){var l=void 0===i?{}:i,f=l.maxNumResults,m=void 0===f?3:f,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===c&&(c=o),void 0===p&&(p=[]),e.length>0||r(!1),d>0||r(!1),o===c||s.length>0||r(!1);for(var y=c.wrapped,v=u.wrapped,T=0;T<e.length;T++){var A=e[T];if((A.token0.equals(y.currency)||A.token1.equals(y.currency))&&!A.reserve0.equalTo(a)&&!A.reserve1.equalTo(a)){var q=void 0;try{q=A.getOutputAmount(y)[0]}catch(t){if(t.isInsufficientInputAmountError)continue;throw t}if(q.currency.equals(v))n.sortedInsert(p,new t(new P([].concat(s,[A]),o.currency,u),o,n.TradeType.EXACT_INPUT),m,_);else if(d>1&&e.length>1){var k=e.slice(0,T).concat(e.slice(T+1,e.length));t.bestTradeExactIn(k,o,u,{maxNumResults:m,maxHops:d-1},[].concat(s,[A]),q,p)}}}return p},e.worstExecutionPrice=function(t){return new n.Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(t).quotient,this.minimumAmountOut(t).quotient)},t.bestTradeExactOut=function(e,o,u,i,s,c,p){var l=void 0===i?{}:i,f=l.maxNumResults,m=void 0===f?3:f,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===c&&(c=u),void 0===p&&(p=[]),e.length>0||r(!1),d>0||r(!1),u===c||s.length>0||r(!1);for(var y=c.wrapped,v=o.wrapped,T=0;T<e.length;T++){var A=e[T];if((A.token0.equals(y.currency)||A.token1.equals(y.currency))&&!A.reserve0.equalTo(a)&&!A.reserve1.equalTo(a)){var q=void 0;try{q=A.getInputAmount(y)[0]}catch(t){if(t.isInsufficientReservesError)continue;throw t}if(q.currency.equals(v))n.sortedInsert(p,new t(new P([A].concat(s),o,u.currency),u,n.TradeType.EXACT_OUTPUT),m,_);else if(d>1&&e.length>1){var k=e.slice(0,T).concat(e.slice(T+1,e.length));t.bestTradeExactOut(k,o,u,{maxNumResults:m,maxHops:d-1},[A].concat(s),q,p)}}}return p},t}();function F(t){return"0x"+t.quotient.toString(16)}var S=function(){function t(){}return t.swapCallParameters=function(t,e){var o=t.inputAmount.currency.isNative,u=t.outputAmount.currency.isNative;o&&u&&r(!1),!("ttl"in e)||e.ttl>0||r(!1);var i,s,a,c=n.validateAndParseAddress(e.recipient),p=F(t.maximumAmountIn(e.allowedSlippage)),l=F(t.minimumAmountOut(e.allowedSlippage)),f=t.route.path.map((function(t){return t.address})),m="ttl"in e?"0x"+(Math.floor((new Date).getTime()/1e3)+e.ttl).toString(16):"0x"+e.deadline.toString(16),h=Boolean(e.feeOnTransfer);switch(t.tradeType){case n.TradeType.EXACT_INPUT:o?(i=h?"swapExactETHForTokensSupportingFeeOnTransferTokens":"swapExactETHForTokens",s=[l,f,c,m],a=p):u?(i=h?"swapExactTokensForETHSupportingFeeOnTransferTokens":"swapExactTokensForETH",s=[p,l,f,c,m],a="0x0"):(i=h?"swapExactTokensForTokensSupportingFeeOnTransferTokens":"swapExactTokensForTokens",s=[p,l,f,c,m],a="0x0");break;case n.TradeType.EXACT_OUTPUT:h&&r(!1),o?(i="swapETHForExactTokens",s=[l,f,c,m],a=p):u?(i="swapTokensForExactETH",s=[l,p,f,c,m],a="0x0"):(i="swapTokensForExactTokens",s=[l,p,f,c,m],a="0x0")}return{methodName:i,args:s,value:a}},t}();exports.FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.INIT_CODE_HASH=i,exports.InsufficientInputAmountError=b,exports.InsufficientReservesError=x,exports.MINIMUM_LIQUIDITY=s,exports.Pair=E,exports.Route=P,exports.Router=S,exports.Trade=R,exports.computePairAddress=O,exports.inputOutputComparator=C,exports.tradeComparator=_;
+"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var e=t(require("jsbi")),n=require("@uniswap/sdk-core"),r=t(require("tiny-invariant")),o=require("@ethersproject/solidity"),u=require("@ethersproject/address"),i="0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db",s=e.BigInt(1e3),a=e.BigInt(0),c=e.BigInt(1),p=e.BigInt(5),l=e.BigInt(997),f=e.BigInt(1e3);function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e,n){return e&&m(t.prototype,e),n&&m(t,n),t}function d(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t,e){return(v=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function T(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function A(t,e,n){return(A=T()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&v(o,n.prototype),o}).apply(null,arguments)}function q(t){var e="function"==typeof Map?new Map:void 0;return(q=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return A(t,arguments,y(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),v(n,t)})(t)}function k(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function w(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return g(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}var I="setPrototypeOf"in Object,x=function(t){function e(){var n;return(n=t.call(this)||this).isInsufficientReservesError=!0,n.name=n.constructor.name,I&&Object.setPrototypeOf(k(n),(this instanceof e?this.constructor:void 0).prototype),n}return d(e,t),e}(q(Error)),b=function(t){function e(){var n;return(n=t.call(this)||this).isInsufficientInputAmountError=!0,n.name=n.constructor.name,I&&Object.setPrototypeOf(k(n),(this instanceof e?this.constructor:void 0).prototype),n}return d(e,t),e}(q(Error)),O=function(t){var e=t.factoryAddress,n=t.tokenA,r=t.tokenB,s=n.sortsBefore(r)?[n,r]:[r,n];return u.getCreate2Address(e,o.keccak256(["bytes"],[o.pack(["address","address"],[s[0].address,s[1].address])]),i)},E=function(){function t(e,r){var o=e.currency.sortsBefore(r.currency)?[e,r]:[r,e];this.liquidityToken=new n.Token(o[0].currency.chainId,t.getAddress(o[0].currency,o[1].currency),18,"UNI-V2","Uniswap V2"),this.tokenAmounts=o}t.getAddress=function(t,e){return O({factoryAddress:"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",tokenA:t,tokenB:e})};var o=t.prototype;return o.involvesToken=function(t){return t.equals(this.token0)||t.equals(this.token1)},o.priceOf=function(t){return this.involvesToken(t)||r(!1),t.equals(this.token0)?this.token0Price:this.token1Price},o.reserveOf=function(t){return this.involvesToken(t)||r(!1),t.equals(this.token0)?this.reserve0:this.reserve1},o.getOutputAmount=function(o){if(this.involvesToken(o.currency)||r(!1),e.equal(this.reserve0.quotient,a)||e.equal(this.reserve1.quotient,a))throw new x;var u=this.reserveOf(o.currency),i=this.reserveOf(o.currency.equals(this.token0)?this.token1:this.token0),s=e.multiply(o.quotient,l),c=e.multiply(s,i.quotient),p=e.add(e.multiply(u.quotient,f),s),m=n.CurrencyAmount.fromRawAmount(o.currency.equals(this.token0)?this.token1:this.token0,e.divide(c,p));if(e.equal(m.quotient,a))throw new b;return[m,new t(u.add(o),i.subtract(m))]},o.getInputAmount=function(o){if(this.involvesToken(o.currency)||r(!1),e.equal(this.reserve0.quotient,a)||e.equal(this.reserve1.quotient,a)||e.greaterThanOrEqual(o.quotient,this.reserveOf(o.currency).quotient))throw new x;var u=this.reserveOf(o.currency),i=this.reserveOf(o.currency.equals(this.token0)?this.token1:this.token0),s=e.multiply(e.multiply(i.quotient,o.quotient),f),p=e.multiply(e.subtract(u.quotient,o.quotient),l),m=n.CurrencyAmount.fromRawAmount(o.currency.equals(this.token0)?this.token1:this.token0,e.add(e.divide(s,p),c));return[m,new t(i.add(m),u.subtract(o))]},o.getLiquidityMinted=function(t,o,u){t.currency.equals(this.liquidityToken)||r(!1);var i,c=o.currency.sortsBefore(u.currency)?[o,u]:[u,o];if(c[0].currency.equals(this.token0)&&c[1].currency.equals(this.token1)||r(!1),e.equal(t.quotient,a))i=e.subtract(n.sqrt(e.multiply(c[0].quotient,c[1].quotient)),s);else{var p=e.divide(e.multiply(c[0].quotient,t.quotient),this.reserve0.quotient),l=e.divide(e.multiply(c[1].quotient,t.quotient),this.reserve1.quotient);i=e.lessThanOrEqual(p,l)?p:l}if(!e.greaterThan(i,a))throw new b;return n.CurrencyAmount.fromRawAmount(this.liquidityToken,i)},o.getLiquidityValue=function(t,o,u,i,s){var c;if(void 0===i&&(i=!1),this.involvesToken(t)||r(!1),o.currency.equals(this.liquidityToken)||r(!1),u.currency.equals(this.liquidityToken)||r(!1),e.lessThanOrEqual(u.quotient,o.quotient)||r(!1),i){s||r(!1);var l=e.BigInt(s);if(e.equal(l,a))c=o;else{var f=n.sqrt(e.multiply(this.reserve0.quotient,this.reserve1.quotient)),m=n.sqrt(l);if(e.greaterThan(f,m)){var h=e.multiply(o.quotient,e.subtract(f,m)),d=e.add(e.multiply(f,p),m),y=e.divide(h,d);c=o.add(n.CurrencyAmount.fromRawAmount(this.liquidityToken,y))}else c=o}}else c=o;return n.CurrencyAmount.fromRawAmount(t,e.divide(e.multiply(u.quotient,this.reserveOf(t).quotient),c.quotient))},h(t,[{key:"token0Price",get:function(){var t=this.tokenAmounts[1].divide(this.tokenAmounts[0]);return new n.Price(this.token0,this.token1,t.denominator,t.numerator)}},{key:"token1Price",get:function(){var t=this.tokenAmounts[0].divide(this.tokenAmounts[1]);return new n.Price(this.token1,this.token0,t.denominator,t.numerator)}},{key:"chainId",get:function(){return this.token0.chainId}},{key:"token0",get:function(){return this.tokenAmounts[0].currency}},{key:"token1",get:function(){return this.tokenAmounts[1].currency}},{key:"reserve0",get:function(){return this.tokenAmounts[0]}},{key:"reserve1",get:function(){return this.tokenAmounts[1]}}]),t}(),P=function(){function t(t,e,n){this._midPrice=null,t.length>0||r(!1);var o=t[0].chainId;t.every((function(t){return t.chainId===o}))||r(!1);var u=e.wrapped;t[0].involvesToken(u)||r(!1),void 0===n||t[t.length-1].involvesToken(n.wrapped)||r(!1);for(var i,s=[u],a=w(t.entries());!(i=a()).done;){var c=i.value,p=c[1],l=s[c[0]];l.equals(p.token0)||l.equals(p.token1)||r(!1);var f=l.equals(p.token0)?p.token1:p.token0;s.push(f)}this.pairs=t,this.path=s,this.input=e,this.output=n}return h(t,[{key:"midPrice",get:function(){if(null!==this._midPrice)return this._midPrice;for(var t,e=[],r=w(this.pairs.entries());!(t=r()).done;){var o=t.value,u=o[1];e.push(this.path[o[0]].equals(u.token0)?new n.Price(u.reserve0.currency,u.reserve1.currency,u.reserve0.quotient,u.reserve1.quotient):new n.Price(u.reserve1.currency,u.reserve0.currency,u.reserve1.quotient,u.reserve0.quotient))}var i=e.slice(1).reduce((function(t,e){return t.multiply(e)}),e[0]);return this._midPrice=new n.Price(this.input,this.output,i.denominator,i.numerator)}},{key:"chainId",get:function(){return this.pairs[0].chainId}}]),t}();function C(t,e){return t.inputAmount.currency.equals(e.inputAmount.currency)||r(!1),t.outputAmount.currency.equals(e.outputAmount.currency)||r(!1),t.outputAmount.equalTo(e.outputAmount)?t.inputAmount.equalTo(e.inputAmount)?0:t.inputAmount.lessThan(e.inputAmount)?-1:1:t.outputAmount.lessThan(e.outputAmount)?1:-1}function _(t,e){var n=C(t,e);return 0!==n?n:t.priceImpact.lessThan(e.priceImpact)?-1:t.priceImpact.greaterThan(e.priceImpact)?1:t.route.path.length-e.route.path.length}var R=function(){function t(t,e,o){this.route=t,this.tradeType=o;var u=new Array(t.path.length);if(o===n.TradeType.EXACT_INPUT){e.currency.equals(t.input)||r(!1),u[0]=e.wrapped;for(var i=0;i<t.path.length-1;i++){var s=t.pairs[i].getOutputAmount(u[i]);u[i+1]=s[0]}this.inputAmount=n.CurrencyAmount.fromFractionalAmount(t.input,e.numerator,e.denominator),this.outputAmount=n.CurrencyAmount.fromFractionalAmount(t.output,u[u.length-1].numerator,u[u.length-1].denominator)}else{e.currency.equals(t.output)||r(!1),u[u.length-1]=e.wrapped;for(var a=t.path.length-1;a>0;a--){var c=t.pairs[a-1].getInputAmount(u[a]);u[a-1]=c[0]}this.inputAmount=n.CurrencyAmount.fromFractionalAmount(t.input,u[0].numerator,u[0].denominator),this.outputAmount=n.CurrencyAmount.fromFractionalAmount(t.output,e.numerator,e.denominator)}this.executionPrice=new n.Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient),this.priceImpact=n.computePriceImpact(t.midPrice,this.inputAmount,this.outputAmount)}t.exactIn=function(e,r){return new t(e,r,n.TradeType.EXACT_INPUT)},t.exactOut=function(e,r){return new t(e,r,n.TradeType.EXACT_OUTPUT)};var e=t.prototype;return e.minimumAmountOut=function(t){if(t.lessThan(a)&&r(!1),this.tradeType===n.TradeType.EXACT_OUTPUT)return this.outputAmount;var e=new n.Fraction(c).add(t).invert().multiply(this.outputAmount.quotient).quotient;return n.CurrencyAmount.fromRawAmount(this.outputAmount.currency,e)},e.maximumAmountIn=function(t){if(t.lessThan(a)&&r(!1),this.tradeType===n.TradeType.EXACT_INPUT)return this.inputAmount;var e=new n.Fraction(c).add(t).multiply(this.inputAmount.quotient).quotient;return n.CurrencyAmount.fromRawAmount(this.inputAmount.currency,e)},t.bestTradeExactIn=function(e,o,u,i,s,c,p){var l=void 0===i?{}:i,f=l.maxNumResults,m=void 0===f?3:f,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===c&&(c=o),void 0===p&&(p=[]),e.length>0||r(!1),d>0||r(!1),o===c||s.length>0||r(!1);for(var y=c.wrapped,v=u.wrapped,T=0;T<e.length;T++){var A=e[T];if((A.token0.equals(y.currency)||A.token1.equals(y.currency))&&!A.reserve0.equalTo(a)&&!A.reserve1.equalTo(a)){var q=void 0;try{q=A.getOutputAmount(y)[0]}catch(t){if(t.isInsufficientInputAmountError)continue;throw t}if(q.currency.equals(v))n.sortedInsert(p,new t(new P([].concat(s,[A]),o.currency,u),o,n.TradeType.EXACT_INPUT),m,_);else if(d>1&&e.length>1){var k=e.slice(0,T).concat(e.slice(T+1,e.length));t.bestTradeExactIn(k,o,u,{maxNumResults:m,maxHops:d-1},[].concat(s,[A]),q,p)}}}return p},e.worstExecutionPrice=function(t){return new n.Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(t).quotient,this.minimumAmountOut(t).quotient)},t.bestTradeExactOut=function(e,o,u,i,s,c,p){var l=void 0===i?{}:i,f=l.maxNumResults,m=void 0===f?3:f,h=l.maxHops,d=void 0===h?3:h;void 0===s&&(s=[]),void 0===c&&(c=u),void 0===p&&(p=[]),e.length>0||r(!1),d>0||r(!1),u===c||s.length>0||r(!1);for(var y=c.wrapped,v=o.wrapped,T=0;T<e.length;T++){var A=e[T];if((A.token0.equals(y.currency)||A.token1.equals(y.currency))&&!A.reserve0.equalTo(a)&&!A.reserve1.equalTo(a)){var q=void 0;try{q=A.getInputAmount(y)[0]}catch(t){if(t.isInsufficientReservesError)continue;throw t}if(q.currency.equals(v))n.sortedInsert(p,new t(new P([A].concat(s),o,u.currency),u,n.TradeType.EXACT_OUTPUT),m,_);else if(d>1&&e.length>1){var k=e.slice(0,T).concat(e.slice(T+1,e.length));t.bestTradeExactOut(k,o,u,{maxNumResults:m,maxHops:d-1},[A].concat(s),q,p)}}}return p},t}();function F(t){return"0x"+t.quotient.toString(16)}var S=function(){function t(){}return t.swapCallParameters=function(t,e){var o=t.inputAmount.currency.isNative,u=t.outputAmount.currency.isNative;o&&u&&r(!1),!("ttl"in e)||e.ttl>0||r(!1);var i,s,a,c=n.validateAndParseAddress(e.recipient),p=F(t.maximumAmountIn(e.allowedSlippage)),l=F(t.minimumAmountOut(e.allowedSlippage)),f=t.route.path.map((function(t){return t.address})),m="ttl"in e?"0x"+(Math.floor((new Date).getTime()/1e3)+e.ttl).toString(16):"0x"+e.deadline.toString(16),h=Boolean(e.feeOnTransfer);switch(t.tradeType){case n.TradeType.EXACT_INPUT:o?(i=h?"swapExactETHForTokensSupportingFeeOnTransferTokens":"swapExactETHForTokens",s=[l,f,c,m],a=p):u?(i=h?"swapExactTokensForETHSupportingFeeOnTransferTokens":"swapExactTokensForETH",s=[p,l,f,c,m],a="0x0"):(i=h?"swapExactTokensForTokensSupportingFeeOnTransferTokens":"swapExactTokensForTokens",s=[p,l,f,c,m],a="0x0");break;case n.TradeType.EXACT_OUTPUT:h&&r(!1),o?(i="swapETHForExactTokens",s=[l,f,c,m],a=p):u?(i="swapTokensForExactETH",s=[l,p,f,c,m],a="0x0"):(i="swapTokensForExactTokens",s=[l,p,f,c,m],a="0x0")}return{methodName:i,args:s,value:a}},t}();exports.FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.INIT_CODE_HASH=i,exports.InsufficientInputAmountError=b,exports.InsufficientReservesError=x,exports.MINIMUM_LIQUIDITY=s,exports.Pair=E,exports.Route=P,exports.Router=S,exports.Trade=R,exports.computePairAddress=O,exports.inputOutputComparator=C,exports.tradeComparator=_;
 //# sourceMappingURL=v2-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
index c29df8e..b1642bb 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
index 9a899ed..68f55bc 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
@@ -5,7 +5,7 @@ import { keccak256, pack } from '@ethersproject/solidity';
 import { getCreate2Address } from '@ethersproject/address';
 
 var FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';
+var INIT_CODE_HASH = '0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db';
 var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption
 
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
index 4f87329..a98bfed 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"v2-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x39508270e57a7b0c1d470bd64db67ef1e8a221c9ef76e08d2a87edd691ce92db'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}
